

from tensorflow import keras

model = keras.models.load_model(model_name, custom_objects={"custom_f1": custom_f1},compile=False)
model.summary()

import glob
import cv2
import matplotlib.pyplot as plt
from tqdm.notebook import tqdm
from sklearn.metrics import roc_auc_score
from sklearn.metrics import f1_score
import seaborn as sns
import matplotlib.pyplot as plt     

from sklearn.metrics import confusion_matrix
def get_data(path,tipo):
    predictions = []
    y_test = []
    filename_list = glob.glob(os.path.join(path,'0','*.jpg'))
    for filename in tqdm(filename_list):
        img_rgb1 = plt.imread(filename)
        img_rgb = cv2.resize(img_rgb1,(WIDTH,HEIGHT))
        img_rgb = img_rgb/255.0
        img = np.reshape(img_rgb,(-1,HEIGHT, WIDTH,3))
        prediction = model.predict(img)
        clase = 0 if prediction[0][0]< 0.49 else 1
        
        #print(prediction,clase)
        if 0!=clase:
            print(filename,'real ',0,'prediction ',clase,prediction)
            print('brightness',brightness(img_rgb1))
            color = ('b','g','r')
            plt.imshow(img_rgb1)
            plt.show()
            '''
            for i,col in enumerate(color):
                histr = cv2.calcHist([img_rgb1],[i],None,[256],[0,256])
                plt.plot(histr,color = col)
                plt.xlim([0,256])
            plt.show()
            '''
            plt.imshow(img_rgb)
            plt.show()
            '''
            for i,col in enumerate(color):
                histr = cv2.calcHist([np.array(img_rgb*255,dtype=np.uint8)],[i],None,[256],[0,256])
                plt.plot(histr,color = col)
                plt.xlim([0,256])
            plt.show()
            '''

        predictions.append(clase)
        y_test.append(0)

    filename_list = glob.glob(os.path.join(path,'1','*.jpg'))
    for filename in tqdm(filename_list):
        img_rgb1 = plt.imread(filename)
        img_rgb = cv2.resize(img_rgb1,(WIDTH,HEIGHT))
        '''
        if brightness(img_rgb)<81:
            img_rgb = adjust_gamma(img_rgb,1.35)
        else:
            img_rgb = img_rgb1.copy()
        #plt.imshow(img)
        #plt.show()
        #'''
        img_rgb = img_rgb/255.0
        img = np.reshape(img_rgb,(-1,HEIGHT, WIDTH,3))
        #vgg_prediction = tf.keras.applications.vgg16.preprocess_input(img)
        prediction = model.predict(img)
        clase = 0 if prediction[0][0]< 0.49 else 1

        #print(prediction,clase)
        if 1!=clase:
            print(filename,'real ',1,'prediction ',clase,prediction)
            print('brightness',brightness(img_rgb1))
            plt.imshow(img_rgb1)
            plt.show()
        predictions.append(clase)
        y_test.append(1)
        
        
    roc = roc_auc_score(predictions,y_test)
    f1  = f1_score(y_test, predictions, average='micro')
    print('roc',roc)
    print('f1',f1)

    labels = [0, 1]
    cm = confusion_matrix(y_test, predictions, labels)
    fig_cm = plt.figure(figsize=(5,3))
    ax= plt.subplot()
    sns.heatmap(cm, annot=True, fmt='g', ax=ax, cmap="Blues");  #annot=True to annotate cells, ftm='g' to disable scientific notation

    # labels, title and ticks
    ax.set_xlabel('Predicted labels');ax.set_ylabel('True labels'); 
    ax.set_title(tipo+' Confusion matrix - roc '+str(np.round(roc,2))+" f1 "+str(np.round(f1,2))); 
    print('- roc '+str(np.round(roc,2))+" f1 "+str(np.round(f1,2)))
    ax.xaxis.set_ticklabels([0, 1]); ax.yaxis.set_ticklabels([0, 1]);
    

    fig_cm.savefig("results/tresh_0.49_cm_model_roc_"+str(np.round(roc,4))+"_f1_"+str(np.round(f1,4))+"_"+tipo+"_.png", dpi=fig_cm.dpi)

    return predictions,y_test,fig_cm,roc,f1



predictions,y_test,fig_cm,roc,f1 = get_data('../../Dataset/processed/image_train/firmas/modelamiento/train/','train')

predictions,y_test,fig_cm,roc,f1 = get_data('../../Dataset/processed/image_train/firmas/modelamiento/validation/','validation')
predictions,y_test,fig_cm,roc,f1 = get_data('../../Dataset/processed/image_test/firmas/','test')

import numpy as np

filename_model = "../../Resources/model_firmas/tresh_0.49_model_roc_"+str(np.round(roc,4))+"_f1_"+str(np.round(f1,4))+"_.h5"
print('saving model ',filename_model)
model.save(filename_model)
fig_model_performance.suptitle("tresh_0.49_model_roc_"+str(np.round(roc,4))+"_f1_"+str(np.round(f1,4))) # or plt.suptitle('Main title')

fig_model_performance.savefig("results/tresh_0.49_model_roc_"+str(np.round(roc,4))+"_f1_"+str(np.round(f1,4))+"_.png", dpi=fig_model_performance.dpi)

#fig_cm.suptitle("cm_model_roc_"+str(np.round(roc,4))+"_f1_"+str(np.round(f1,4))) # or plt.suptitle('Main title')
#fig_cm.savefig("results/tresh_0.49_cm_model_roc_"+str(np.round(roc,4))+"_f1_"+str(np.round(f1,4))+"_.png", dpi=fig_cm.dpi)
